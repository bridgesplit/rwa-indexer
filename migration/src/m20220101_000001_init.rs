use enum_iterator::all;
use sea_orm_migration::{prelude::*, sea_query::extension::postgres::Type};

use crate::model::table::{
    ApprovalAccount, AssetController, AssetControllerVersion, DataAccount, DataAccountType,
    DataRegistry, DataRegistryVersion, IdentityAccount, IdentityAccountRole, IdentityRegistry,
    IdentityRegistryVersion, PolicyEngineAccount, PolicyEngineAccountVersion,
};
#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_type(
                Type::create()
                    .as_enum(AssetController::AssetControllerVersion)
                    .values(vec![AssetControllerVersion::V1])
                    .to_owned(),
            )
            .await?;

        manager
            .create_type(
                Type::create()
                    .as_enum(DataRegistry::DataRegistryVersion)
                    .values(vec![DataRegistryVersion::V1, DataRegistryVersion::V2])
                    .to_owned(),
            )
            .await?;

        manager
            .create_type(
                Type::create()
                    .as_enum(DataAccount::DataAccountType)
                    .values(vec![DataAccountType::V1, DataAccountType::V2])
                    .to_owned(),
            )
            .await?;

        manager
            .create_type(
                Type::create()
                    .as_enum(IdentityAccount::IdentityAccountRole)
                    .values(vec![IdentityAccountRole::V1, IdentityAccountRole::V2])
                    .to_owned(),
            )
            .await?;

        manager
            .create_type(
                Type::create()
                    .as_enum(IdentityRegistry::IdentityRegistryVersion)
                    .values(vec![
                        IdentityRegistryVersion::V1,
                        IdentityRegistryVersion::V2,
                    ])
                    .to_owned(),
            )
            .await?;

        manager
            .create_type(
                Type::create()
                    .as_enum(PolicyEngineAccount::PolicyEngineAccountVersion)
                    .values(vec![
                        PolicyEngineAccountVersion::V1,
                        PolicyEngineAccountVersion::V2,
                    ])
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(AssetController::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(AssetController::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(AssetController::AssetMint)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(AssetController::DataUpdateAuthority)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(AssetController::TransactionApprovalAuthority)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(AssetController::Version)
                            .enumeration(
                                AssetController::AssetControllerVersion,
                                all::<AssetControllerVersion>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(AssetController::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(AssetController::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(AssetController::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ApprovalAccount::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ApprovalAccount::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ApprovalAccount::AssetMint)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ApprovalAccount::ToAddress)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ApprovalAccount::FromAddress)
                            .binary()
                            .not_null(),
                    )
                    .col(ColumnDef::new(ApprovalAccount::Amount).integer().not_null())
                    .col(
                        ColumnDef::new(ApprovalAccount::ExpirySlot)
                            .integer()
                            .not_null(),
                    )
                    .col(ColumnDef::new(ApprovalAccount::Closed).boolean().not_null())
                    .col(
                        ColumnDef::new(ApprovalAccount::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ApprovalAccount::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(ApprovalAccount::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(DataRegistry::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(DataRegistry::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(DataRegistry::AssetMint).binary().not_null())
                    .col(ColumnDef::new(DataRegistry::Authority).binary().not_null())
                    .col(
                        ColumnDef::new(DataRegistry::Version)
                            .enumeration(
                                DataRegistry::DataRegistryVersion,
                                all::<DataRegistryVersion>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(DataRegistry::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(DataRegistry::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(DataRegistry::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(DataAccount::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(DataAccount::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(DataAccount::Key).string().not_null())
                    .col(ColumnDef::new(DataAccount::Value).binary().not_null())
                    .col(
                        ColumnDef::new(DataAccount::DataRegistry)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(DataAccount::Type)
                            .enumeration(
                                DataAccount::DataAccountType,
                                all::<DataAccountType>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(ColumnDef::new(DataAccount::Valid).boolean().not_null())
                    .col(
                        ColumnDef::new(DataAccount::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(DataAccount::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(DataAccount::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(DataAccount::Table, DataAccount::DataRegistry)
                            .to(DataRegistry::Table, DataRegistry::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(IdentityAccount::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(IdentityAccount::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(IdentityAccount::Owner).string().not_null())
                    .col(
                        ColumnDef::new(IdentityAccount::Role)
                            .enumeration(
                                IdentityAccount::IdentityAccountRole,
                                all::<IdentityAccountRole>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityAccount::DataRegistry)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityAccount::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(ColumnDef::new(IdentityAccount::Closed).boolean().not_null())
                    .col(
                        ColumnDef::new(IdentityAccount::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(IdentityAccount::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(IdentityAccount::Table, IdentityAccount::DataRegistry)
                            .to(DataRegistry::Table, DataRegistry::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(IdentityRegistry::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(IdentityRegistry::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::AssetMint)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::Authority)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::Version)
                            .enumeration(
                                IdentityRegistry::IdentityRegistryVersion,
                                all::<IdentityRegistryVersion>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(IdentityRegistry::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(PolicyEngineAccount::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(PolicyEngineAccount::Id)
                            .binary()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::AssetMint)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::Authority)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::Version)
                            .enumeration(
                                PolicyEngineAccount::PolicyEngineAccountVersion,
                                all::<PolicyEngineAccountVersion>().collect::<Vec<_>>(),
                            )
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::SlotUpdated)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::CreatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .col(
                        ColumnDef::new(PolicyEngineAccount::LastUpdatedAt)
                            .timestamp()
                            .not_null()
                            .default(Expr::current_timestamp()),
                    )
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(Table::drop().table(AssetController::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(ApprovalAccount::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(DataAccount::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(IdentityRegistry::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(PolicyEngineAccount::Table).to_owned())
            .await?;

        Ok(())
    }
}
